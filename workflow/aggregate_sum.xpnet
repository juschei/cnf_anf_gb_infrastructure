<defun name="aggregate_sum">
  <in name="values" type="int" place="values"/>
  <out name="sum" type="int" place="sum"/>

  <net>
    <place name="values" type="int"/>
    <place name="sum" type="int"/>


    <transition name="aggregate">
      <defun>
        <in name="value" type="int"/>
        <out name="sum" type="int"/>

        <module name="aggregate_sum" function="plus2 (value, sum)">
        <cinclude href="stdio.h"/>
        <cinclude href="stdlib.h"/>
        <cinclude href="string.h"/>
        <cinclude href="iostream"/>
        <cinclude href="unistd.h"/>
        <cinclude href="Python.h"/>
        <code><![CDATA[
          Py_Initialize();
          
          std::cout << "before python function" << std::endl;

          PyRun_SimpleString("import os\nprint(os.getcwd())");

          std::cout << "after python function" << std::endl;

          PyObject *sysPath = PySys_GetObject("path");
          PyList_Append(sysPath, PyUnicode_FromString("/home/juschei/Desktop/aggregate_sum/src"));

          PyObject *name, *load_module, *func, *callfunc;
          name = PyUnicode_FromString((char*)"python_script");
          load_module = PyImport_Import(name);

          if(load_module == NULL) {
            std::cout << "ERROR importing module" << std::endl;
            exit(-1);
          }
          std::cout << "module imported" << std::endl;

          func = PyObject_GetAttrString(load_module, (char*)"test");
          PyObject *args = PyTuple_Pack(1, PyLong_FromLong((long) value);
          callfunc = PyObject_CallObject(func, args);

          if(callfunc == NULL){
             std::cout << "ERROR calling function" << std::endl;
             exit(-1);
          }

          double fun1_output = PyFloat_AsDouble(callfunc);
          std::cout << fun1_output << std::endl;

          Py_Finalize();
          
          
          // convert integer from token to string filename
          char buffer[4];
          snprintf(buffer, 4, "%03d", value);
          
          // build execution command for application
          //char skeleton[] = "echo $USER ";
          //char skeleton[] = "/usr/bin/sage /home/juschei/Desktop/cnf_anf_gb/worker.sage.py --nr ";
          char skeleton[] = "/usr/bin/sage /home/juschei/Desktop/cnf_anf_gb/batch_processor.sage.py --startidx ";
          //char skeleton[] = "/usr/bin/python3 /home/juschei/Desktop/test.py --nr ";
          char logging_pipe[] = " 2> /home/juschei/Desktop/cnf_anf_gb/logs/";
          
          int command_size = 2*sizeof(buffer) + sizeof(skeleton) + sizeof(logging_pipe) + 2;
          char command[command_size];
          command[0] = '\0'; // to concat to the beginning without junk
          
          
          strcat(command, skeleton);
          strcat(command, buffer);
          strcat(command, logging_pipe);
          strcat(command, buffer);
          
          
          std::cout << command << std::endl;
          
          // execute command on system
          //std::cout << system(command) << std::endl;
          //sleep(2);
        ]]></code>
        </module>
      </defun>

      <connect-in port="value" place="values"/>
      <connect-out port="sum" place="sum"/>
    </transition>
  </net>
</defun>
